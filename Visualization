import React, { useState, useEffect } from "react";
import * as d3 from "d3";

const GraphVisualization = () => {
  const [data, setData] = useState(null);

  useEffect(() => {
    // fetch your data here and set it using the setData function

    // Example data
    const exampleData = {
      nodes: [
        { id: 1, name: "Node 1" },
        { id: 2, name: "Node 2" },
        { id: 3, name: "Node 3" }
      ],
      links: [
        { source: 1, target: 2 },
        { source: 2, target: 3 }
      ]
    };

    setData(exampleData);
  }, []);

  useEffect(() => {
    if (!data) {
      return;
    }

    // create the d3 graph visualization
    const svg = d3.select("svg");
    const width = +svg.attr("width");
    const height = +svg.attr("height");

    const simulation = d3
      .forceSimulation()
      .force("link", d3.forceLink().id(d => d.id))
      .force("charge", d3.forceManyBody().strength(-200))
      .force("center", d3.forceCenter(width / 2, height / 2));

    const link = svg
      .append("g")
      .attr("class", "links")
      .selectAll("line")
      .data(data.links)
      .join("line")
      .attr("stroke", "#999")
      .attr("stroke-opacity", 0.6);

    const node = svg
      .append("g")
      .attr("class", "nodes")
      .selectAll("circle")
      .data(data.nodes)
      .join("circle")
      .attr("r", 5)
      .attr("fill", "#00bfff");

    node.append("title").text(d => d.name);

    simulation.nodes(data.nodes).on("tick", () => {
      link
        .attr("x1", d => d.source.x)
        .attr("y1", d => d.source.y)
        .attr("x2", d => d.target.x)
        .attr("y2", d => d.target.y);

      node.attr("cx", d => d.x).attr("cy", d => d.y);
    });

    simulation.force("link").links(data.links);
  }, [data]);

  return (
    <div className="graph-container">
      <svg width={800} height={600} />
    </div>
  );
};

export default GraphVisualization;
